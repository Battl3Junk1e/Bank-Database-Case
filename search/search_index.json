{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Big Bank Database Documentation Welcome to the documentation for the Big Bank database project. This documentation covers the database schema, including details on the tables, an ER diagram, future improvements, and an explanation of Third Normal Form (3NF) along with how our design adheres to it. Use the navigation on the left to browse through the sections.","title":"Home"},{"location":"#big-bank-database-documentation","text":"Welcome to the documentation for the Big Bank database project. This documentation covers the database schema, including details on the tables, an ER diagram, future improvements, and an explanation of Third Normal Form (3NF) along with how our design adheres to it. Use the navigation on the left to browse through the sections.","title":"Big Bank Database Documentation"},{"location":"er_diagram/","text":"ER Diagram Conceptual ER-Diagram: Logical ER-Diagram:","title":"ER Diagram"},{"location":"er_diagram/#er-diagram","text":"Conceptual ER-Diagram: Logical ER-Diagram:","title":"ER Diagram"},{"location":"future_improvements/","text":"Future Improvements This section outlines several areas where the Big Bank database can be improved: Indexing and Performance Optimization: Introduce additional indexes, especially on frequently queried columns, to improve performance. Stored Procedures and Triggers: Implement stored procedures for common operations (e.g., fund transfers, fee applications) and triggers for auditing or enforcing business rules. Enhanced Data Integrity: Add further constraints, validations, and possibly check constraints to ensure data accuracy and consistency. Partitioning and Scalability: Consider table partitioning for large tables (like transactions) and assess scalability for growing data volumes. Security and Auditing: Enhance security measures such as encryption for sensitive data and implement audit trails for critical operations. Documentation and Code Comments: Improve inline documentation within SQL scripts and consider auto-generating documentation based on schema definitions. Backup and Recovery Strategies: Develop robust backup procedures and disaster recovery plans. User-defined Data Types: Use custom data types to standardize data input for columns like phone numbers, email addresses, etc.","title":"Future Improvements"},{"location":"future_improvements/#future-improvements","text":"This section outlines several areas where the Big Bank database can be improved: Indexing and Performance Optimization: Introduce additional indexes, especially on frequently queried columns, to improve performance. Stored Procedures and Triggers: Implement stored procedures for common operations (e.g., fund transfers, fee applications) and triggers for auditing or enforcing business rules. Enhanced Data Integrity: Add further constraints, validations, and possibly check constraints to ensure data accuracy and consistency. Partitioning and Scalability: Consider table partitioning for large tables (like transactions) and assess scalability for growing data volumes. Security and Auditing: Enhance security measures such as encryption for sensitive data and implement audit trails for critical operations. Documentation and Code Comments: Improve inline documentation within SQL scripts and consider auto-generating documentation based on schema definitions. Backup and Recovery Strategies: Develop robust backup procedures and disaster recovery plans. User-defined Data Types: Use custom data types to standardize data input for columns like phone numbers, email addresses, etc.","title":"Future Improvements"},{"location":"normalization/","text":"Normalization and 3NF What is Third Normal Form (3NF)? Third Normal Form (3NF) is a database design approach aimed at reducing data redundancy and eliminating undesirable characteristics like insertion, update, and deletion anomalies. For a table to be in 3NF, it must satisfy the following conditions: - 1NF (First Normal Form): The table has a primary key, and all attributes contain only atomic (indivisible) values. - 2NF (Second Normal Form): The table is in 1NF, and every non-key attribute is fully functionally dependent on the primary key. - 3NF (Third Normal Form): The table is in 2NF, and there are no transitive dependencies among the non-key attributes (i.e., non-key attributes do not depend on other non-key attributes). How the Big Bank Schema Follows 3NF Atomicity and Primary Keys: Every table in the schema defines a primary key (typically an auto-incremented integer) and ensures that all columns hold atomic values. Functional Dependencies: Each table is designed so that non-key columns are fully functionally dependent on the primary key. For example, in the Customer table, the customer's first name, last name, and contact information depend solely on CustomerID . Elimination of Transitive Dependencies: By separating entities into different tables (e.g., splitting account types, transaction types, and roles into their own tables), the design avoids transitive dependencies. This separation ensures that updates to attributes in one table (like updating a transaction type) do not cause anomalies in another table. Use of Foreign Keys: The schema extensively uses foreign keys to enforce relationships between tables, further ensuring that data remains consistent and adheres to normalization rules. This design minimizes redundancy and improves maintainability while ensuring the integrity of the data through proper relational mapping.","title":"Normalization and 3NF"},{"location":"normalization/#normalization-and-3nf","text":"","title":"Normalization and 3NF"},{"location":"normalization/#what-is-third-normal-form-3nf","text":"Third Normal Form (3NF) is a database design approach aimed at reducing data redundancy and eliminating undesirable characteristics like insertion, update, and deletion anomalies. For a table to be in 3NF, it must satisfy the following conditions: - 1NF (First Normal Form): The table has a primary key, and all attributes contain only atomic (indivisible) values. - 2NF (Second Normal Form): The table is in 1NF, and every non-key attribute is fully functionally dependent on the primary key. - 3NF (Third Normal Form): The table is in 2NF, and there are no transitive dependencies among the non-key attributes (i.e., non-key attributes do not depend on other non-key attributes).","title":"What is Third Normal Form (3NF)?"},{"location":"normalization/#how-the-big-bank-schema-follows-3nf","text":"Atomicity and Primary Keys: Every table in the schema defines a primary key (typically an auto-incremented integer) and ensures that all columns hold atomic values. Functional Dependencies: Each table is designed so that non-key columns are fully functionally dependent on the primary key. For example, in the Customer table, the customer's first name, last name, and contact information depend solely on CustomerID . Elimination of Transitive Dependencies: By separating entities into different tables (e.g., splitting account types, transaction types, and roles into their own tables), the design avoids transitive dependencies. This separation ensures that updates to attributes in one table (like updating a transaction type) do not cause anomalies in another table. Use of Foreign Keys: The schema extensively uses foreign keys to enforce relationships between tables, further ensuring that data remains consistent and adheres to normalization rules. This design minimizes redundancy and improves maintainability while ensuring the integrity of the data through proper relational mapping.","title":"How the Big Bank Schema Follows 3NF"},{"location":"tables/","text":"Tables Overview This page provides an explanation for each table in the Big Bank database schema. Branch Description: Stores information about bank branches. Columns: BranchID : Primary key, auto-increment. BranchName : Name of the branch. Location : Physical address. ContactNumber : Contact details. Employee Description: Contains employee records associated with branches. Columns: EmployeeID : Primary key, auto-increment. BranchID : Foreign key referencing Branch(BranchID) . FirstName , LastName : Employee names. Position : Job title. HireDate : Date of hire. Customer Description: Stores customer details. Columns: CustomerID : Primary key, auto-increment. BranchID : Foreign key referencing Branch(BranchID) . FirstName , LastName : Customer names. DateOfBirth : Birth date. Email : Unique email address. Phone : Unique phone number. AccountType Description: Defines types of bank accounts (e.g., Checking, Savings). Columns: AccountTypeID : Primary key, auto-increment. AccountType : Unique account type name. Account Description: Represents bank accounts. Columns: AccountID : Primary key, auto-increment. Balance : Current balance. AccountTypeID : Foreign key referencing AccountType(AccountTypeID) . BranchID : Foreign key referencing Branch(BranchID) . DispositionRole Description: Lists roles for account dispositions (e.g., Owner, User). Columns: RoleID : Primary key, auto-increment. Role : Unique role name. Dispositions Description: Associates customers with accounts and defines their role. Columns: DispositionID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . AccountID : Foreign key referencing Account(AccountID) . RoleID : Foreign key referencing DispositionRole(RoleID) . CardType Description: Defines types of cards (e.g., Debit, Credit). Columns: CardTypeID : Primary key, auto-increment. TypeName : Unique card type name. Card Description: Stores card details issued to accounts. Columns: CardID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . CardTypeID : Foreign key referencing CardType(CardTypeID) . CardNumber : Unique card number. ExpiryDate : Card expiration date. IsValid : Indicates card validity. OnlinePurchases , Worldwide : Additional card features. Merchant Description: Stores merchant details. Columns: MerchantID : Primary key, auto-increment. Name : Merchant name. CardTransaction Description: Logs transactions made with cards. Columns: TransactionID : Primary key, auto-increment. CardID : Foreign key referencing Card(CardID) . TransactionDate : Defaults to current date. Amount : Transaction amount. Merchant : Foreign key referencing Merchant(MerchantID) . TransactionType Description: Lists types of transactions (e.g., Deposit, Withdrawal). Columns: TransactionTypeID : Primary key, auto-increment. TransactionType : Unique transaction type name. AccountTransaction Description: Logs account-level transactions. Columns: TransactionID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . TransactionDate : Defaults to current date. TransactionTypeID : Foreign key referencing TransactionType(TransactionTypeID) . Amount : Transaction amount. InterestRate Description: Stores interest rate information. Columns: RateID : Primary key, auto-increment. InterestRate : The rate value (non-negative). IsVariable : Indicates if the rate is variable. Loan Description: Contains loan details for customers. Columns: LoanID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . AccountID : Foreign key referencing Account(AccountID) . LoanAmount : Principal amount of the loan. InterestRateID : Foreign key referencing InterestRate(RateID) . LoanStartDate : Date when the loan started. LoanTermMonths : Loan term in months. SecurityType Description: Defines types of collateral (e.g., Car, House). Columns: SecurityTypeID : Primary key, auto-increment. SecurityType : Unique security type name. Securities Description: Represents collateral associated with loans. Columns: SecurityID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . LoanID : Foreign key referencing Loan(LoanID) . SecurityTypeID : Foreign key referencing SecurityType(SecurityTypeID) . EstimatedValue : Estimated value of the security. Description : Additional details. OwnershipDocument : Path to any ownership documentation. PaymentMethod Description: Lists accepted payment methods. Columns: PaymentMethodID : Primary key, auto-increment. MethodName : Unique method name (e.g., Bank Transfer, Cash). LoanPayment Description: Records loan payment details. Columns: PaymentID : Primary key, auto-increment. LoanID : Foreign key referencing Loan(LoanID) . PaymentDate : Defaults to current date. AmountPaid : Amount that was paid. PaymentMethodID : Foreign key referencing PaymentMethod(PaymentMethodID) . FeeCharges Description: Logs fees and charges applied to accounts. Columns: FeeID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . FeeType : Type or description of the fee. FeeAmount : Amount of the fee. ChargedDate : Defaults to current date. ServiceRequestType Description: Defines types of service requests (e.g., Account Inquiry, Card Replacement). Columns: RequestTypeID : Primary key, auto-increment. RequestType : Unique request type name. ServiceRequestStatus Description: Lists the statuses for service requests. Columns: RequestStatusID : Primary key, auto-increment. RequestStatus : Unique status description (e.g., Pending, Completed). ServiceRequest Description: Tracks customer service requests. Columns: RequestID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . RequestTypeID : Foreign key referencing ServiceRequestType(RequestTypeID) . RequestStatusID : Foreign key referencing ServiceRequestStatus(RequestStatusID) . RequestDate : Defaults to current date. OnlineBankingStatus Description: Defines the statuses for online banking sessions (e.g., Active, Locked). Columns: StatusID : Primary key, auto-increment. Status : Unique status description. OnlineBanking Description: Manages online banking sessions for customers. Columns: SessionID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . LastLogin : Defaults to current date. StatusID : Foreign key referencing OnlineBankingStatus(StatusID) .","title":"Tables"},{"location":"tables/#tables-overview","text":"This page provides an explanation for each table in the Big Bank database schema.","title":"Tables Overview"},{"location":"tables/#branch","text":"Description: Stores information about bank branches. Columns: BranchID : Primary key, auto-increment. BranchName : Name of the branch. Location : Physical address. ContactNumber : Contact details.","title":"Branch"},{"location":"tables/#employee","text":"Description: Contains employee records associated with branches. Columns: EmployeeID : Primary key, auto-increment. BranchID : Foreign key referencing Branch(BranchID) . FirstName , LastName : Employee names. Position : Job title. HireDate : Date of hire.","title":"Employee"},{"location":"tables/#customer","text":"Description: Stores customer details. Columns: CustomerID : Primary key, auto-increment. BranchID : Foreign key referencing Branch(BranchID) . FirstName , LastName : Customer names. DateOfBirth : Birth date. Email : Unique email address. Phone : Unique phone number.","title":"Customer"},{"location":"tables/#accounttype","text":"Description: Defines types of bank accounts (e.g., Checking, Savings). Columns: AccountTypeID : Primary key, auto-increment. AccountType : Unique account type name.","title":"AccountType"},{"location":"tables/#account","text":"Description: Represents bank accounts. Columns: AccountID : Primary key, auto-increment. Balance : Current balance. AccountTypeID : Foreign key referencing AccountType(AccountTypeID) . BranchID : Foreign key referencing Branch(BranchID) .","title":"Account"},{"location":"tables/#dispositionrole","text":"Description: Lists roles for account dispositions (e.g., Owner, User). Columns: RoleID : Primary key, auto-increment. Role : Unique role name.","title":"DispositionRole"},{"location":"tables/#dispositions","text":"Description: Associates customers with accounts and defines their role. Columns: DispositionID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . AccountID : Foreign key referencing Account(AccountID) . RoleID : Foreign key referencing DispositionRole(RoleID) .","title":"Dispositions"},{"location":"tables/#cardtype","text":"Description: Defines types of cards (e.g., Debit, Credit). Columns: CardTypeID : Primary key, auto-increment. TypeName : Unique card type name.","title":"CardType"},{"location":"tables/#card","text":"Description: Stores card details issued to accounts. Columns: CardID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . CardTypeID : Foreign key referencing CardType(CardTypeID) . CardNumber : Unique card number. ExpiryDate : Card expiration date. IsValid : Indicates card validity. OnlinePurchases , Worldwide : Additional card features.","title":"Card"},{"location":"tables/#merchant","text":"Description: Stores merchant details. Columns: MerchantID : Primary key, auto-increment. Name : Merchant name.","title":"Merchant"},{"location":"tables/#cardtransaction","text":"Description: Logs transactions made with cards. Columns: TransactionID : Primary key, auto-increment. CardID : Foreign key referencing Card(CardID) . TransactionDate : Defaults to current date. Amount : Transaction amount. Merchant : Foreign key referencing Merchant(MerchantID) .","title":"CardTransaction"},{"location":"tables/#transactiontype","text":"Description: Lists types of transactions (e.g., Deposit, Withdrawal). Columns: TransactionTypeID : Primary key, auto-increment. TransactionType : Unique transaction type name.","title":"TransactionType"},{"location":"tables/#accounttransaction","text":"Description: Logs account-level transactions. Columns: TransactionID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . TransactionDate : Defaults to current date. TransactionTypeID : Foreign key referencing TransactionType(TransactionTypeID) . Amount : Transaction amount.","title":"AccountTransaction"},{"location":"tables/#interestrate","text":"Description: Stores interest rate information. Columns: RateID : Primary key, auto-increment. InterestRate : The rate value (non-negative). IsVariable : Indicates if the rate is variable.","title":"InterestRate"},{"location":"tables/#loan","text":"Description: Contains loan details for customers. Columns: LoanID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . AccountID : Foreign key referencing Account(AccountID) . LoanAmount : Principal amount of the loan. InterestRateID : Foreign key referencing InterestRate(RateID) . LoanStartDate : Date when the loan started. LoanTermMonths : Loan term in months.","title":"Loan"},{"location":"tables/#securitytype","text":"Description: Defines types of collateral (e.g., Car, House). Columns: SecurityTypeID : Primary key, auto-increment. SecurityType : Unique security type name.","title":"SecurityType"},{"location":"tables/#securities","text":"Description: Represents collateral associated with loans. Columns: SecurityID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . LoanID : Foreign key referencing Loan(LoanID) . SecurityTypeID : Foreign key referencing SecurityType(SecurityTypeID) . EstimatedValue : Estimated value of the security. Description : Additional details. OwnershipDocument : Path to any ownership documentation.","title":"Securities"},{"location":"tables/#paymentmethod","text":"Description: Lists accepted payment methods. Columns: PaymentMethodID : Primary key, auto-increment. MethodName : Unique method name (e.g., Bank Transfer, Cash).","title":"PaymentMethod"},{"location":"tables/#loanpayment","text":"Description: Records loan payment details. Columns: PaymentID : Primary key, auto-increment. LoanID : Foreign key referencing Loan(LoanID) . PaymentDate : Defaults to current date. AmountPaid : Amount that was paid. PaymentMethodID : Foreign key referencing PaymentMethod(PaymentMethodID) .","title":"LoanPayment"},{"location":"tables/#feecharges","text":"Description: Logs fees and charges applied to accounts. Columns: FeeID : Primary key, auto-increment. AccountID : Foreign key referencing Account(AccountID) . FeeType : Type or description of the fee. FeeAmount : Amount of the fee. ChargedDate : Defaults to current date.","title":"FeeCharges"},{"location":"tables/#servicerequesttype","text":"Description: Defines types of service requests (e.g., Account Inquiry, Card Replacement). Columns: RequestTypeID : Primary key, auto-increment. RequestType : Unique request type name.","title":"ServiceRequestType"},{"location":"tables/#servicerequeststatus","text":"Description: Lists the statuses for service requests. Columns: RequestStatusID : Primary key, auto-increment. RequestStatus : Unique status description (e.g., Pending, Completed).","title":"ServiceRequestStatus"},{"location":"tables/#servicerequest","text":"Description: Tracks customer service requests. Columns: RequestID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . RequestTypeID : Foreign key referencing ServiceRequestType(RequestTypeID) . RequestStatusID : Foreign key referencing ServiceRequestStatus(RequestStatusID) . RequestDate : Defaults to current date.","title":"ServiceRequest"},{"location":"tables/#onlinebankingstatus","text":"Description: Defines the statuses for online banking sessions (e.g., Active, Locked). Columns: StatusID : Primary key, auto-increment. Status : Unique status description.","title":"OnlineBankingStatus"},{"location":"tables/#onlinebanking","text":"Description: Manages online banking sessions for customers. Columns: SessionID : Primary key, auto-increment. CustomerID : Foreign key referencing Customer(CustomerID) . LastLogin : Defaults to current date. StatusID : Foreign key referencing OnlineBankingStatus(StatusID) .","title":"OnlineBanking"}]}